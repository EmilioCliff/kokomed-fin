$ curl -L https://github.com/golang-migrate/migrate/releases/download/$version/migrate.$os-$arch.tar.gz | tar xvz


-- -- name: ListLoans :many
-- SELECT 
--     l.*, 
--     p.branch_id 
-- FROM loans l
-- JOIN products p ON l.product_id = p.id
-- WHERE 
--     (? IS NULL OR p.branch_id = ?)
--     AND (? IS NULL OR l.client_id = ?)
--     AND (? IS NULL OR l.loan_officer = ?)
--     AND (? IS NULL OR l.status = ?)
-- LIMIT ? OFFSET ?;

-- -- name: ListLoans :many
-- SELECT 
--     l.*, 
--     p.branch_id,
--     c.full_name AS client_name,
--     u.full_name AS loan_officer_name
-- FROM loans l
-- JOIN products p ON l.product_id = p.id
-- JOIN clients c ON l.client_id = c.id
-- JOIN users u ON l.loan_officer = u.id
-- WHERE 
--     (? IS NULL OR p.branch_id = ?)
--     AND (
--         ? IS NULL 
--         OR c.full_name ILIKE '%' || ? || '%'
--         OR u.full_name ILIKE '%' || ? || '%'
--     )
--     AND (
--         ? IS NULL 
--         OR l.status = ANY (?)
--     )
-- LIMIT ? OFFSET ?;


{
	"rewrites": [
		{
			"source": "/(.*)",
			"destination": "/index.html"
		}
	]
}


<Sheet
				open={!!selectedRow}
				onOpenChange={(open: boolean) => {
					if (!open) {
						setSelectedRow(null);
					}
				}}
			>
				<SheetContent className="overflow-auto custom-sheet-class">
					<SheetHeader>
						<SheetTitle>Product Details</SheetTitle>
						<SheetDescription>
							Description goes here
						</SheetDescription>
					</SheetHeader>
					{selectedRow && (
						<div className="py-4">
							{Object.entries(selectedRow).map(([key, value]) => {
								// if (key === "createdBy" || key === "updatedBy") {
								// 	return;
								// }
								// if (fieldRenderers[key]) {
								// 	return (
								// 		<div key={key} className='grid grid-cols-[0.5fr_1fr] mb-4'>
								// 			<span className='font-medium capitalize'>{key}</span>
								// 			{fieldRenderers[key](value)}
								// 		</div>
								// 	);
								// }

								// return (
								// 	<div key={key} className='grid grid-cols-[0.5fr_1fr] mb-4'>
								// 		<span className='font-medium capitalize'>{key}</span>
								// 		{typeof value === "string" ||
								// 		typeof value === "number" ||
								// 		typeof value === "boolean" ? (
								// 			<Input
								// 				readOnly
								// 				placeholder={value.toString()}
								// 				className='bg-gray-100 text-gray-500'
								// 			/>
								// 		) : (
								// 			JSON.stringify(value)
								// 		)}
								// 	</div>
								// );
								return (
									<div
										key={key}
										className="grid grid-cols-[0.5fr_1fr] mb-4"
									>
										<span className="font-medium capitalize">
											{key}
										</span>
										<p>
											{typeof value == 'string' ? (
												<p>{value}</p>
											) : (
												JSON.stringify(value)
											)}
										</p>
									</div>
								);
							})}
							<Button
								size="lg"
								onClick={() => console.log('CLicked')}
								className="mt-8"
							>
								Save
							</Button>
						</div>
					)}
				</SheetContent>
			</Sheet>



			<Sheet
				open={!!selectedRow}
				onOpenChange={(open: boolean) => {
					if (!open) {
						setSelectedRow(null);
					}
				}}
			>
				<SheetContent className="overflow-auto custom-sheet-class">
					<SheetHeader>
						<SheetTitle>Loan Details</SheetTitle>
						<SheetDescription>
							Description goes here
						</SheetDescription>
					</SheetHeader>
					{selectedRow && (
						<div className="py-4">
							{Object.entries(selectedRow).map(([key, value]) => {
								// if (key === "createdBy" || key === "updatedBy") {
								// 	return;
								// }
								// if (fieldRenderers[key]) {
								// 	return (
								// 		<div key={key} className='grid grid-cols-[0.5fr_1fr] mb-4'>
								// 			<span className='font-medium capitalize'>{key}</span>
								// 			{fieldRenderers[key](value)}
								// 		</div>
								// 	);
								// }

								// return (
								// 	<div key={key} className='grid grid-cols-[0.5fr_1fr] mb-4'>
								// 		<span className='font-medium capitalize'>{key}</span>
								// 		{typeof value === "string" ||
								// 		typeof value === "number" ||
								// 		typeof value === "boolean" ? (
								// 			<Input
								// 				readOnly
								// 				placeholder={value.toString()}
								// 				className='bg-gray-100 text-gray-500'
								// 			/>
								// 		) : (
								// 			JSON.stringify(value)
								// 		)}
								// 	</div>
								// );
								return (
									<div
										key={key}
										className="grid grid-cols-[0.5fr_1fr] mb-4"
									>
										<span className="font-medium capitalize">
											{key}
										</span>
										<p>
											{typeof value == 'string' ? (
												<p>{value}</p>
											) : (
												JSON.stringify(value)
											)}
										</p>
									</div>
								);
							})}
							<Button
								size="lg"
								onClick={() => console.log('CLicked')}
								className="mt-8"
							>
								Save
							</Button>
						</div>
					)}
				</SheetContent>
			</Sheet>





			<>
			{/* {mutation.isPending && <Spinner />} */}
			<div className="grid grid-cols-1 min-h-full sm:grid-cols-1 md:grid-cols-2">
				<div className="bg-slate-500 bg-custom-bg bg-cover bg-center somen"></div>
				<div className="w-full min-h-full flex justify-center items-center">
					<Card className="mx-auto max-w-4xl border-none shadow-none flex-col text-center">
						<CardHeader className="space-y-1 gap-4">
							<CardTitle className="text-2xl font-bold">
								Reset Password
							</CardTitle>
							<CardDescription className="">
								Welcome to Kokomed Finance System
							</CardDescription>
						</CardHeader>
						<CardContent>
							<Form {...form}>
								<form
									onSubmit={form.handleSubmit(
										onSubmit,
										onError,
									)}
									className="space-y-8"
								>
									<FormField
										control={form.control}
										name="newPassword"
										render={({ field }) => (
											<FormItem>
												<FormLabel>
													New Password
												</FormLabel>
												<FormControl>
													<div className="space-y-2 relative">
														<Input
															placeholder="Password"
															type={
																showPassword
																	? 'text'
																	: 'password'
															}
															{...field}
														/>
														<button
															type="button"
															className="absolute right-3 top-1/3 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 focus:outline-none"
															onClick={() =>
																setShowPassword(
																	(
																		prevState,
																	) =>
																		!prevState,
																)
															}
															aria-label={
																showPassword
																	? 'Hide password'
																	: 'Show password'
															}
														>
															{showPassword ? (
																<EyeOff className="h-5 w-5" />
															) : (
																<Eye className="h-5 w-5" />
															)}
														</button>
													</div>
												</FormControl>
												<FormMessage />
											</FormItem>
										)}
									/>
									<FormField
										control={form.control}
										name="confirmPassword"
										render={({ field }) => (
											<FormItem>
												<FormLabel>
													Confirm Password
												</FormLabel>
												<FormControl>
													<div className="space-y-2 relative">
														<Input
															placeholder="Password"
															type={
																showConfirmPassword
																	? 'text'
																	: 'password'
															}
															{...field}
														/>
														<button
															type="button"
															className="absolute right-3 top-1/3 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 focus:outline-none"
															onClick={() =>
																setShowConfirmPassword(
																	(
																		prevState,
																	) =>
																		!prevState,
																)
															}
															aria-label={
																showConfirmPassword
																	? 'Hide password'
																	: 'Show password'
															}
														>
															{showConfirmPassword ? (
																<EyeOff className="h-5 w-5" />
															) : (
																<Eye className="h-5 w-5" />
															)}
														</button>
													</div>
												</FormControl>
												<FormMessage />
											</FormItem>
										)}
									/>

									<Button
										className=" ml-auto mr-auto"
										type="submit"
									>
										Submit
									</Button>
								</form>
							</Form>
						</CardContent>
					</Card>
				</div>
			</div>
		</>


		 <>
      {/* {mutation.isPending && <Spinner />} */}
      <div className="grid grid-cols-1 min-h-full sm:grid-cols-1 md:grid-cols-2">
        <div className="bg-slate-500 bg-custom-bg bg-cover bg-center somen"></div>
        <div className="w-full min-h-full flex justify-center items-center">
          <Card className="mx-auto max-w-4xl border-none shadow-none flex-col text-center">
            <CardHeader className="space-y-1 gap-4">
              <CardTitle className="text-2xl font-bold">LOGIN</CardTitle>
              <CardDescription className="">
                Welcome to Kokomed Finance System
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Form {...form}>
                <form
                  onSubmit={form.handleSubmit(onSubmit, onError)}
                  className="space-y-8"
                >
                  <FormField
                    control={form.control}
                    name="email"
                    render={({ field }) => (
                      <FormItem>
                        <FormControl>
                          <Input placeholder="Email" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="password"
                    render={({ field }) => (
                      <FormItem>
                        <FormControl>
                          <div className="space-y-2 relative">
                            <Input
                              placeholder="Password"
                              type={showPassword ? "text" : "password"}
                              {...field}
                            />
                            <button
                              type="button"
                              className="absolute right-3 top-1/3 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 focus:outline-none"
                              onClick={() => setShowPassword((prevState) => !prevState)}
                              aria-label={
                                showPassword ? "Hide password" : "Show password"
                              }
                            >
                              {showPassword ? (
                                <EyeOff className="h-5 w-5" />
                              ) : (
                                <Eye className="h-5 w-5" />
                              )}
                            </button>
                          </div>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <Button className=" ml-auto mr-auto" type="submit">
                    Submit
                  </Button>
                </form>
              </Form>
              {/* <div className="space-y-4">
                <div className="space-y-2">
                  <Input
                    id="email"
                    value={credentials.email}
                    onChange={handleChange}
                    type="email"
                    placeholder="m@example.com"
                    required
                  />
                </div>
                <div className="space-y-2 relative">
                  <Input
                    id="password"
                    className="pr-10"
                    placeholder="Password"
                    type={showPassword ? 'text' : 'password'}
                    required
                    autoComplete="off"
                    value={credentials.password}
                    onChange={handleChange}
                  />
                  <button
                    type="button"
                    className="absolute right-3 top-1/3 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 focus:outline-none"
                    onClick={() => setShowPassword((prevState) => !prevState)}
                    aria-label={showPassword ? 'Hide password' : 'Show password'}
                  >
                    {showPassword ? (
                      <EyeOff className="h-5 w-5" />
                    ) : (
                      <Eye className="h-5 w-5" />
                    )}
                  </button>
                </div>
                <Button onClick={onSubmit} type="submit" className="w-full">
                  Login
                </Button>
              </div> */}
            </CardContent>
          </Card>
        </div>
      </div>
    </>
