// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: overpayments.sql

package generated

import (
	"context"
	"database/sql"
)

const createClientOverpaymentTransaction = `-- name: CreateClientOverpaymentTransaction :execresult
INSERT INTO client_overpayment_transactions (client_id, payment_id, amount, created_by)
VALUES (?, ?, ?, ?)
`

type CreateClientOverpaymentTransactionParams struct {
	ClientID  uint32         `json:"client_id"`
	PaymentID sql.NullInt32  `json:"payment_id"`
	Amount    float64        `json:"amount"`
	CreatedBy sql.NullString `json:"created_by"`
}

func (q *Queries) CreateClientOverpaymentTransaction(ctx context.Context, arg CreateClientOverpaymentTransactionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createClientOverpaymentTransaction,
		arg.ClientID,
		arg.PaymentID,
		arg.Amount,
		arg.CreatedBy,
	)
}

const getClientOverpaymentTransaction = `-- name: GetClientOverpaymentTransaction :one
SELECT id, client_id, payment_id, amount, created_by, created_at FROM client_overpayment_transactions WHERE id = ?
`

func (q *Queries) GetClientOverpaymentTransaction(ctx context.Context, id uint32) (ClientOverpaymentTransaction, error) {
	row := q.db.QueryRowContext(ctx, getClientOverpaymentTransaction, id)
	var i ClientOverpaymentTransaction
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.PaymentID,
		&i.Amount,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getClientOverpaymentTransactionByPaymentId = `-- name: GetClientOverpaymentTransactionByPaymentId :one
SELECT id, client_id, payment_id, amount, created_by, created_at FROM client_overpayment_transactions WHERE payment_id = ?
`

func (q *Queries) GetClientOverpaymentTransactionByPaymentId(ctx context.Context, paymentID sql.NullInt32) (ClientOverpaymentTransaction, error) {
	row := q.db.QueryRowContext(ctx, getClientOverpaymentTransactionByPaymentId, paymentID)
	var i ClientOverpaymentTransaction
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.PaymentID,
		&i.Amount,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getClientOverpaymentTransactions = `-- name: GetClientOverpaymentTransactions :many
SELECT id, client_id, payment_id, amount, created_by, created_at FROM client_overpayment_transactions WHERE client_id = ?
`

func (q *Queries) GetClientOverpaymentTransactions(ctx context.Context, clientID uint32) ([]ClientOverpaymentTransaction, error) {
	rows, err := q.db.QueryContext(ctx, getClientOverpaymentTransactions, clientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClientOverpaymentTransaction{}
	for rows.Next() {
		var i ClientOverpaymentTransaction
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.PaymentID,
			&i.Amount,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
