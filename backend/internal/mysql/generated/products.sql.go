// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products.sql

package generated

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :execresult
INSERT INTO products (branch_id, loan_amount, repay_amount, interest_amount, updated_by) 
VALUES (
    ?, ?, ?, ?, ?
)
`

type CreateProductParams struct {
	BranchID       uint32  `json:"branch_id"`
	LoanAmount     float64 `json:"loan_amount"`
	RepayAmount    float64 `json:"repay_amount"`
	InterestAmount float64 `json:"interest_amount"`
	UpdatedBy      uint32  `json:"updated_by"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProduct,
		arg.BranchID,
		arg.LoanAmount,
		arg.RepayAmount,
		arg.InterestAmount,
		arg.UpdatedBy,
	)
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = ?
`

func (q *Queries) DeleteProduct(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, branch_id, loan_amount, repay_amount, interest_amount, updated_by, updated_at, created_at FROM products WHERE id = ? LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id uint32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.BranchID,
		&i.LoanAmount,
		&i.RepayAmount,
		&i.InterestAmount,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, branch_id, loan_amount, repay_amount, interest_amount, updated_by, updated_at, created_at FROM products LIMIT ? OFFSET ?
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.BranchID,
			&i.LoanAmount,
			&i.RepayAmount,
			&i.InterestAmount,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByBranch = `-- name: ListProductsByBranch :many
SELECT id, branch_id, loan_amount, repay_amount, interest_amount, updated_by, updated_at, created_at FROM products WHERE branch_id = ? LIMIT ? OFFSET ?
`

type ListProductsByBranchParams struct {
	BranchID uint32 `json:"branch_id"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) ListProductsByBranch(ctx context.Context, arg ListProductsByBranchParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByBranch, arg.BranchID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.BranchID,
			&i.LoanAmount,
			&i.RepayAmount,
			&i.InterestAmount,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :execresult
UPDATE products 
    SET loan_amount = coalesce(?, loan_amount),
    repay_amount = coalesce(?, repay_amount),
    interest_amount = coalesce(?, interest_amount),
    updated_by = ?
WHERE id = ?
`

type UpdateProductParams struct {
	LoanAmount     sql.NullFloat64 `json:"loan_amount"`
	RepayAmount    sql.NullFloat64 `json:"repay_amount"`
	InterestAmount sql.NullFloat64 `json:"interest_amount"`
	UpdatedBy      uint32          `json:"updated_by"`
	ID             uint32          `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateProduct,
		arg.LoanAmount,
		arg.RepayAmount,
		arg.InterestAmount,
		arg.UpdatedBy,
		arg.ID,
	)
}
