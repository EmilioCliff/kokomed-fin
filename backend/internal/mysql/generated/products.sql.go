// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const countLoansByCategory = `-- name: CountLoansByCategory :one
SELECT COUNT(*) AS total_products
FROM products p
JOIN branches b ON p.branch_id = b.id
WHERE 
    (
        COALESCE(?, '') = '' 
        OR LOWER(b.name) LIKE ?
    )
`

type CountLoansByCategoryParams struct {
	Column1 interface{} `json:"column_1"`
	Name    string      `json:"name"`
}

func (q *Queries) CountLoansByCategory(ctx context.Context, arg CountLoansByCategoryParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countLoansByCategory, arg.Column1, arg.Name)
	var total_products int64
	err := row.Scan(&total_products)
	return total_products, err
}

const createProduct = `-- name: CreateProduct :execresult
INSERT INTO products (branch_id, loan_amount, repay_amount, interest_amount, updated_by) 
VALUES (
    ?, ?, ?, ?, ?
)
`

type CreateProductParams struct {
	BranchID       uint32  `json:"branch_id"`
	LoanAmount     float64 `json:"loan_amount"`
	RepayAmount    float64 `json:"repay_amount"`
	InterestAmount float64 `json:"interest_amount"`
	UpdatedBy      uint32  `json:"updated_by"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProduct,
		arg.BranchID,
		arg.LoanAmount,
		arg.RepayAmount,
		arg.InterestAmount,
		arg.UpdatedBy,
	)
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = ?
`

func (q *Queries) DeleteProduct(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT 
    p.id, p.branch_id, p.loan_amount, p.repay_amount, p.interest_amount, p.updated_by, p.updated_at, p.created_at, 
    b.name AS branch_name 
FROM products p
JOIN branches b ON p.branch_id = b.id
WHERE p.id = ? 
LIMIT 1
`

type GetProductRow struct {
	ID             uint32    `json:"id"`
	BranchID       uint32    `json:"branch_id"`
	LoanAmount     float64   `json:"loan_amount"`
	RepayAmount    float64   `json:"repay_amount"`
	InterestAmount float64   `json:"interest_amount"`
	UpdatedBy      uint32    `json:"updated_by"`
	UpdatedAt      time.Time `json:"updated_at"`
	CreatedAt      time.Time `json:"created_at"`
	BranchName     string    `json:"branch_name"`
}

func (q *Queries) GetProduct(ctx context.Context, id uint32) (GetProductRow, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i GetProductRow
	err := row.Scan(
		&i.ID,
		&i.BranchID,
		&i.LoanAmount,
		&i.RepayAmount,
		&i.InterestAmount,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.BranchName,
	)
	return i, err
}

const getProductRepayAmount = `-- name: GetProductRepayAmount :one

SELECT repay_amount FROM products WHERE id = ? LIMIT 1
`

// SELECT * FROM products WHERE id = ? LIMIT 1;
func (q *Queries) GetProductRepayAmount(ctx context.Context, id uint32) (float64, error) {
	row := q.db.QueryRowContext(ctx, getProductRepayAmount, id)
	var repay_amount float64
	err := row.Scan(&repay_amount)
	return repay_amount, err
}

const helperProduct = `-- name: HelperProduct :many
SELECT p.id AS productId,
    p.loan_amount AS loanAmount,
    b.name AS branchNAme
FROM products p JOIN branches b ON p.branch_id = b.id
`

type HelperProductRow struct {
	Productid  uint32  `json:"productid"`
	Loanamount float64 `json:"loanamount"`
	Branchname string  `json:"branchname"`
}

func (q *Queries) HelperProduct(ctx context.Context) ([]HelperProductRow, error) {
	rows, err := q.db.QueryContext(ctx, helperProduct)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HelperProductRow{}
	for rows.Next() {
		var i HelperProductRow
		if err := rows.Scan(&i.Productid, &i.Loanamount, &i.Branchname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT id, branch_id, loan_amount, repay_amount, interest_amount, updated_by, updated_at, created_at FROM products LIMIT ? OFFSET ?
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.BranchID,
			&i.LoanAmount,
			&i.RepayAmount,
			&i.InterestAmount,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByBranch = `-- name: ListProductsByBranch :many
SELECT id, branch_id, loan_amount, repay_amount, interest_amount, updated_by, updated_at, created_at FROM products WHERE branch_id = ? LIMIT ? OFFSET ?
`

type ListProductsByBranchParams struct {
	BranchID uint32 `json:"branch_id"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) ListProductsByBranch(ctx context.Context, arg ListProductsByBranchParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByBranch, arg.BranchID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.BranchID,
			&i.LoanAmount,
			&i.RepayAmount,
			&i.InterestAmount,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByCategory = `-- name: ListProductsByCategory :many
SELECT 
    p.id, p.branch_id, p.loan_amount, p.repay_amount, p.interest_amount, p.updated_by, p.updated_at, p.created_at, 
    b.name AS branch_name
FROM products p
JOIN branches b ON p.branch_id = b.id
WHERE 
    (
        COALESCE(?, '') = '' 
        OR LOWER(b.name) LIKE ?
    )
ORDER BY p.created_at DESC
LIMIT ? OFFSET ?
`

type ListProductsByCategoryParams struct {
	Column1 interface{} `json:"column_1"`
	Name    string      `json:"name"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

type ListProductsByCategoryRow struct {
	ID             uint32    `json:"id"`
	BranchID       uint32    `json:"branch_id"`
	LoanAmount     float64   `json:"loan_amount"`
	RepayAmount    float64   `json:"repay_amount"`
	InterestAmount float64   `json:"interest_amount"`
	UpdatedBy      uint32    `json:"updated_by"`
	UpdatedAt      time.Time `json:"updated_at"`
	CreatedAt      time.Time `json:"created_at"`
	BranchName     string    `json:"branch_name"`
}

func (q *Queries) ListProductsByCategory(ctx context.Context, arg ListProductsByCategoryParams) ([]ListProductsByCategoryRow, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByCategory,
		arg.Column1,
		arg.Name,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductsByCategoryRow{}
	for rows.Next() {
		var i ListProductsByCategoryRow
		if err := rows.Scan(
			&i.ID,
			&i.BranchID,
			&i.LoanAmount,
			&i.RepayAmount,
			&i.InterestAmount,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.BranchName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
