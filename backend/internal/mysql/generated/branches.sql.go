// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: branches.sql

package generated

import (
	"context"
	"database/sql"
)

const countBranchesByCategory = `-- name: CountBranchesByCategory :one
SELECT COUNT(*) AS total_branches
FROM branches b
WHERE 
    (
        COALESCE(?, '') = '' 
        OR LOWER(b.name) LIKE ?
    )
`

type CountBranchesByCategoryParams struct {
	Column1 interface{} `json:"column_1"`
	Name    string      `json:"name"`
}

func (q *Queries) CountBranchesByCategory(ctx context.Context, arg CountBranchesByCategoryParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countBranchesByCategory, arg.Column1, arg.Name)
	var total_branches int64
	err := row.Scan(&total_branches)
	return total_branches, err
}

const createBranch = `-- name: CreateBranch :execresult
INSERT INTO branches (name) VALUES (?)
`

func (q *Queries) CreateBranch(ctx context.Context, name string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createBranch, name)
}

const deleteBranch = `-- name: DeleteBranch :exec
DELETE FROM branches WHERE id = ?
`

func (q *Queries) DeleteBranch(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteBranch, id)
	return err
}

const getBranch = `-- name: GetBranch :one
SELECT id, name FROM branches WHERE id = ? LIMIT 1
`

func (q *Queries) GetBranch(ctx context.Context, id uint32) (Branch, error) {
	row := q.db.QueryRowContext(ctx, getBranch, id)
	var i Branch
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listBrachesByCategory = `-- name: ListBrachesByCategory :many
SELECT id, name FROM branches b
WHERE 
    (
        COALESCE(?, '') = '' 
        OR LOWER(b.name) LIKE ?
    )
LIMIT ? OFFSET ?
`

type ListBrachesByCategoryParams struct {
	Column1 interface{} `json:"column_1"`
	Name    string      `json:"name"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

func (q *Queries) ListBrachesByCategory(ctx context.Context, arg ListBrachesByCategoryParams) ([]Branch, error) {
	rows, err := q.db.QueryContext(ctx, listBrachesByCategory,
		arg.Column1,
		arg.Name,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Branch{}
	for rows.Next() {
		var i Branch
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBranches = `-- name: ListBranches :many
SELECT id, name FROM branches
`

func (q *Queries) ListBranches(ctx context.Context) ([]Branch, error) {
	rows, err := q.db.QueryContext(ctx, listBranches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Branch{}
	for rows.Next() {
		var i Branch
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBranch = `-- name: UpdateBranch :execresult
UPDATE branches SET name = ? WHERE id = ?
`

type UpdateBranchParams struct {
	Name string `json:"name"`
	ID   uint32 `json:"id"`
}

func (q *Queries) UpdateBranch(ctx context.Context, arg UpdateBranchParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateBranch, arg.Name, arg.ID)
}
