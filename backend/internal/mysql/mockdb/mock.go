// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/EmilioCliff/kokomed-fin/backend/internal/mysql/generated (interfaces: Querier)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination ./internal/mysql/mockdb/mock.go github.com/EmilioCliff/kokomed-fin/backend/internal/mysql/generated Querier
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	generated "github.com/EmilioCliff/kokomed-fin/backend/internal/mysql/generated"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AssignNonPosted mocks base method.
func (m *MockQuerier) AssignNonPosted(ctx context.Context, arg generated.AssignNonPostedParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignNonPosted", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignNonPosted indicates an expected call of AssignNonPosted.
func (mr *MockQuerierMockRecorder) AssignNonPosted(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignNonPosted", reflect.TypeOf((*MockQuerier)(nil).AssignNonPosted), ctx, arg)
}

// CheckActiveLoanForClient mocks base method.
func (m *MockQuerier) CheckActiveLoanForClient(ctx context.Context, clientID uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckActiveLoanForClient", ctx, clientID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckActiveLoanForClient indicates an expected call of CheckActiveLoanForClient.
func (mr *MockQuerierMockRecorder) CheckActiveLoanForClient(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckActiveLoanForClient", reflect.TypeOf((*MockQuerier)(nil).CheckActiveLoanForClient), ctx, clientID)
}

// CheckUserExistance mocks base method.
func (m *MockQuerier) CheckUserExistance(ctx context.Context, email string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExistance", ctx, email)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExistance indicates an expected call of CheckUserExistance.
func (mr *MockQuerierMockRecorder) CheckUserExistance(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExistance", reflect.TypeOf((*MockQuerier)(nil).CheckUserExistance), ctx, email)
}

// CountBranchesByCategory mocks base method.
func (m *MockQuerier) CountBranchesByCategory(ctx context.Context, arg generated.CountBranchesByCategoryParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountBranchesByCategory", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountBranchesByCategory indicates an expected call of CountBranchesByCategory.
func (mr *MockQuerierMockRecorder) CountBranchesByCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountBranchesByCategory", reflect.TypeOf((*MockQuerier)(nil).CountBranchesByCategory), ctx, arg)
}

// CountClientsByCategory mocks base method.
func (m *MockQuerier) CountClientsByCategory(ctx context.Context, arg generated.CountClientsByCategoryParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountClientsByCategory", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountClientsByCategory indicates an expected call of CountClientsByCategory.
func (mr *MockQuerierMockRecorder) CountClientsByCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountClientsByCategory", reflect.TypeOf((*MockQuerier)(nil).CountClientsByCategory), ctx, arg)
}

// CountClientsNonPosted mocks base method.
func (m *MockQuerier) CountClientsNonPosted(ctx context.Context, arg generated.CountClientsNonPostedParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountClientsNonPosted", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountClientsNonPosted indicates an expected call of CountClientsNonPosted.
func (mr *MockQuerierMockRecorder) CountClientsNonPosted(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountClientsNonPosted", reflect.TypeOf((*MockQuerier)(nil).CountClientsNonPosted), ctx, arg)
}

// CountExpectedPayments mocks base method.
func (m *MockQuerier) CountExpectedPayments(ctx context.Context, arg generated.CountExpectedPaymentsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountExpectedPayments", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountExpectedPayments indicates an expected call of CountExpectedPayments.
func (mr *MockQuerierMockRecorder) CountExpectedPayments(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountExpectedPayments", reflect.TypeOf((*MockQuerier)(nil).CountExpectedPayments), ctx, arg)
}

// CountLoans mocks base method.
func (m *MockQuerier) CountLoans(ctx context.Context, arg generated.CountLoansParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountLoans", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountLoans indicates an expected call of CountLoans.
func (mr *MockQuerierMockRecorder) CountLoans(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountLoans", reflect.TypeOf((*MockQuerier)(nil).CountLoans), ctx, arg)
}

// CountLoansByCategory mocks base method.
func (m *MockQuerier) CountLoansByCategory(ctx context.Context, arg generated.CountLoansByCategoryParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountLoansByCategory", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountLoansByCategory indicates an expected call of CountLoansByCategory.
func (mr *MockQuerierMockRecorder) CountLoansByCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountLoansByCategory", reflect.TypeOf((*MockQuerier)(nil).CountLoansByCategory), ctx, arg)
}

// CountNonPostedByCategory mocks base method.
func (m *MockQuerier) CountNonPostedByCategory(ctx context.Context, arg generated.CountNonPostedByCategoryParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountNonPostedByCategory", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountNonPostedByCategory indicates an expected call of CountNonPostedByCategory.
func (mr *MockQuerierMockRecorder) CountNonPostedByCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountNonPostedByCategory", reflect.TypeOf((*MockQuerier)(nil).CountNonPostedByCategory), ctx, arg)
}

// CountUnpaidInstallmentsData mocks base method.
func (m *MockQuerier) CountUnpaidInstallmentsData(ctx context.Context, arg generated.CountUnpaidInstallmentsDataParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUnpaidInstallmentsData", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUnpaidInstallmentsData indicates an expected call of CountUnpaidInstallmentsData.
func (mr *MockQuerierMockRecorder) CountUnpaidInstallmentsData(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUnpaidInstallmentsData", reflect.TypeOf((*MockQuerier)(nil).CountUnpaidInstallmentsData), ctx, arg)
}

// CountUsersByCategory mocks base method.
func (m *MockQuerier) CountUsersByCategory(ctx context.Context, arg generated.CountUsersByCategoryParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsersByCategory", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsersByCategory indicates an expected call of CountUsersByCategory.
func (mr *MockQuerierMockRecorder) CountUsersByCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsersByCategory", reflect.TypeOf((*MockQuerier)(nil).CountUsersByCategory), ctx, arg)
}

// CreateBranch mocks base method.
func (m *MockQuerier) CreateBranch(ctx context.Context, name string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", ctx, name)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranch indicates an expected call of CreateBranch.
func (mr *MockQuerierMockRecorder) CreateBranch(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockQuerier)(nil).CreateBranch), ctx, name)
}

// CreateClient mocks base method.
func (m *MockQuerier) CreateClient(ctx context.Context, arg generated.CreateClientParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockQuerierMockRecorder) CreateClient(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockQuerier)(nil).CreateClient), ctx, arg)
}

// CreateInstallment mocks base method.
func (m *MockQuerier) CreateInstallment(ctx context.Context, arg generated.CreateInstallmentParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstallment", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstallment indicates an expected call of CreateInstallment.
func (mr *MockQuerierMockRecorder) CreateInstallment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstallment", reflect.TypeOf((*MockQuerier)(nil).CreateInstallment), ctx, arg)
}

// CreateLoan mocks base method.
func (m *MockQuerier) CreateLoan(ctx context.Context, arg generated.CreateLoanParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoan", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoan indicates an expected call of CreateLoan.
func (mr *MockQuerierMockRecorder) CreateLoan(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoan", reflect.TypeOf((*MockQuerier)(nil).CreateLoan), ctx, arg)
}

// CreateNonPosted mocks base method.
func (m *MockQuerier) CreateNonPosted(ctx context.Context, arg generated.CreateNonPostedParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNonPosted", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNonPosted indicates an expected call of CreateNonPosted.
func (mr *MockQuerierMockRecorder) CreateNonPosted(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNonPosted", reflect.TypeOf((*MockQuerier)(nil).CreateNonPosted), ctx, arg)
}

// CreateProduct mocks base method.
func (m *MockQuerier) CreateProduct(ctx context.Context, arg generated.CreateProductParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockQuerierMockRecorder) CreateProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockQuerier)(nil).CreateProduct), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(ctx context.Context, arg generated.CreateUserParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), ctx, arg)
}

// DashBoardDataHelper mocks base method.
func (m *MockQuerier) DashBoardDataHelper(ctx context.Context) (generated.DashBoardDataHelperRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashBoardDataHelper", ctx)
	ret0, _ := ret[0].(generated.DashBoardDataHelperRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashBoardDataHelper indicates an expected call of DashBoardDataHelper.
func (mr *MockQuerierMockRecorder) DashBoardDataHelper(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashBoardDataHelper", reflect.TypeOf((*MockQuerier)(nil).DashBoardDataHelper), ctx)
}

// DashBoardInactiveLoans mocks base method.
func (m *MockQuerier) DashBoardInactiveLoans(ctx context.Context) ([]generated.DashBoardInactiveLoansRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashBoardInactiveLoans", ctx)
	ret0, _ := ret[0].([]generated.DashBoardInactiveLoansRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashBoardInactiveLoans indicates an expected call of DashBoardInactiveLoans.
func (mr *MockQuerierMockRecorder) DashBoardInactiveLoans(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashBoardInactiveLoans", reflect.TypeOf((*MockQuerier)(nil).DashBoardInactiveLoans), ctx)
}

// DashBoardRecentsPayments mocks base method.
func (m *MockQuerier) DashBoardRecentsPayments(ctx context.Context) ([]generated.DashBoardRecentsPaymentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashBoardRecentsPayments", ctx)
	ret0, _ := ret[0].([]generated.DashBoardRecentsPaymentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashBoardRecentsPayments indicates an expected call of DashBoardRecentsPayments.
func (mr *MockQuerierMockRecorder) DashBoardRecentsPayments(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashBoardRecentsPayments", reflect.TypeOf((*MockQuerier)(nil).DashBoardRecentsPayments), ctx)
}

// DeleteBranch mocks base method.
func (m *MockQuerier) DeleteBranch(ctx context.Context, id uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranch", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBranch indicates an expected call of DeleteBranch.
func (mr *MockQuerierMockRecorder) DeleteBranch(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranch", reflect.TypeOf((*MockQuerier)(nil).DeleteBranch), ctx, id)
}

// DeleteClient mocks base method.
func (m *MockQuerier) DeleteClient(ctx context.Context, id uint32) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClient", ctx, id)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockQuerierMockRecorder) DeleteClient(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockQuerier)(nil).DeleteClient), ctx, id)
}

// DeleteLoan mocks base method.
func (m *MockQuerier) DeleteLoan(ctx context.Context, id uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoan", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoan indicates an expected call of DeleteLoan.
func (mr *MockQuerierMockRecorder) DeleteLoan(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoan", reflect.TypeOf((*MockQuerier)(nil).DeleteLoan), ctx, id)
}

// DeleteNonPosted mocks base method.
func (m *MockQuerier) DeleteNonPosted(ctx context.Context, id uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNonPosted", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNonPosted indicates an expected call of DeleteNonPosted.
func (mr *MockQuerierMockRecorder) DeleteNonPosted(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNonPosted", reflect.TypeOf((*MockQuerier)(nil).DeleteNonPosted), ctx, id)
}

// DeleteProduct mocks base method.
func (m *MockQuerier) DeleteProduct(ctx context.Context, id uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockQuerierMockRecorder) DeleteProduct(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockQuerier)(nil).DeleteProduct), ctx, id)
}

// DisburseLoan mocks base method.
func (m *MockQuerier) DisburseLoan(ctx context.Context, arg generated.DisburseLoanParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisburseLoan", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisburseLoan indicates an expected call of DisburseLoan.
func (mr *MockQuerierMockRecorder) DisburseLoan(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisburseLoan", reflect.TypeOf((*MockQuerier)(nil).DisburseLoan), ctx, arg)
}

// GetActiveLoanDetails mocks base method.
func (m *MockQuerier) GetActiveLoanDetails(ctx context.Context, clientID uint32) (generated.GetActiveLoanDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveLoanDetails", ctx, clientID)
	ret0, _ := ret[0].(generated.GetActiveLoanDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveLoanDetails indicates an expected call of GetActiveLoanDetails.
func (mr *MockQuerierMockRecorder) GetActiveLoanDetails(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveLoanDetails", reflect.TypeOf((*MockQuerier)(nil).GetActiveLoanDetails), ctx, clientID)
}

// GetBranch mocks base method.
func (m *MockQuerier) GetBranch(ctx context.Context, id uint32) (generated.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranch", ctx, id)
	ret0, _ := ret[0].(generated.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranch indicates an expected call of GetBranch.
func (mr *MockQuerierMockRecorder) GetBranch(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranch", reflect.TypeOf((*MockQuerier)(nil).GetBranch), ctx, id)
}

// GetBranchReportData mocks base method.
func (m *MockQuerier) GetBranchReportData(ctx context.Context, arg generated.GetBranchReportDataParams) ([]generated.GetBranchReportDataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchReportData", ctx, arg)
	ret0, _ := ret[0].([]generated.GetBranchReportDataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranchReportData indicates an expected call of GetBranchReportData.
func (mr *MockQuerierMockRecorder) GetBranchReportData(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchReportData", reflect.TypeOf((*MockQuerier)(nil).GetBranchReportData), ctx, arg)
}

// GetClient mocks base method.
func (m *MockQuerier) GetClient(ctx context.Context, id uint32) (generated.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", ctx, id)
	ret0, _ := ret[0].(generated.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockQuerierMockRecorder) GetClient(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockQuerier)(nil).GetClient), ctx, id)
}

// GetClientActiveLoan mocks base method.
func (m *MockQuerier) GetClientActiveLoan(ctx context.Context, arg generated.GetClientActiveLoanParams) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientActiveLoan", ctx, arg)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientActiveLoan indicates an expected call of GetClientActiveLoan.
func (mr *MockQuerierMockRecorder) GetClientActiveLoan(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientActiveLoan", reflect.TypeOf((*MockQuerier)(nil).GetClientActiveLoan), ctx, arg)
}

// GetClientAdminsReportData mocks base method.
func (m *MockQuerier) GetClientAdminsReportData(ctx context.Context, arg generated.GetClientAdminsReportDataParams) ([]generated.GetClientAdminsReportDataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientAdminsReportData", ctx, arg)
	ret0, _ := ret[0].([]generated.GetClientAdminsReportDataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientAdminsReportData indicates an expected call of GetClientAdminsReportData.
func (mr *MockQuerierMockRecorder) GetClientAdminsReportData(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientAdminsReportData", reflect.TypeOf((*MockQuerier)(nil).GetClientAdminsReportData), ctx, arg)
}

// GetClientByPhoneNumber mocks base method.
func (m *MockQuerier) GetClientByPhoneNumber(ctx context.Context, phoneNumber string) (generated.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientByPhoneNumber", ctx, phoneNumber)
	ret0, _ := ret[0].(generated.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientByPhoneNumber indicates an expected call of GetClientByPhoneNumber.
func (mr *MockQuerierMockRecorder) GetClientByPhoneNumber(ctx, phoneNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientByPhoneNumber", reflect.TypeOf((*MockQuerier)(nil).GetClientByPhoneNumber), ctx, phoneNumber)
}

// GetClientClientsReportData mocks base method.
func (m *MockQuerier) GetClientClientsReportData(ctx context.Context, arg generated.GetClientClientsReportDataParams) (generated.GetClientClientsReportDataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientClientsReportData", ctx, arg)
	ret0, _ := ret[0].(generated.GetClientClientsReportDataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientClientsReportData indicates an expected call of GetClientClientsReportData.
func (mr *MockQuerierMockRecorder) GetClientClientsReportData(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientClientsReportData", reflect.TypeOf((*MockQuerier)(nil).GetClientClientsReportData), ctx, arg)
}

// GetClientFullData mocks base method.
func (m *MockQuerier) GetClientFullData(ctx context.Context, id uint32) (generated.GetClientFullDataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientFullData", ctx, id)
	ret0, _ := ret[0].(generated.GetClientFullDataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientFullData indicates an expected call of GetClientFullData.
func (mr *MockQuerierMockRecorder) GetClientFullData(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientFullData", reflect.TypeOf((*MockQuerier)(nil).GetClientFullData), ctx, id)
}

// GetClientIDByPhoneNumber mocks base method.
func (m *MockQuerier) GetClientIDByPhoneNumber(ctx context.Context, phoneNumber string) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientIDByPhoneNumber", ctx, phoneNumber)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientIDByPhoneNumber indicates an expected call of GetClientIDByPhoneNumber.
func (mr *MockQuerierMockRecorder) GetClientIDByPhoneNumber(ctx, phoneNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientIDByPhoneNumber", reflect.TypeOf((*MockQuerier)(nil).GetClientIDByPhoneNumber), ctx, phoneNumber)
}

// GetClientOverpayment mocks base method.
func (m *MockQuerier) GetClientOverpayment(ctx context.Context, id uint32) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientOverpayment", ctx, id)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientOverpayment indicates an expected call of GetClientOverpayment.
func (mr *MockQuerierMockRecorder) GetClientOverpayment(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientOverpayment", reflect.TypeOf((*MockQuerier)(nil).GetClientOverpayment), ctx, id)
}

// GetClientsNonPosted mocks base method.
func (m *MockQuerier) GetClientsNonPosted(ctx context.Context, arg generated.GetClientsNonPostedParams) ([]generated.GetClientsNonPostedRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientsNonPosted", ctx, arg)
	ret0, _ := ret[0].([]generated.GetClientsNonPostedRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientsNonPosted indicates an expected call of GetClientsNonPosted.
func (mr *MockQuerierMockRecorder) GetClientsNonPosted(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientsNonPosted", reflect.TypeOf((*MockQuerier)(nil).GetClientsNonPosted), ctx, arg)
}

// GetInstallment mocks base method.
func (m *MockQuerier) GetInstallment(ctx context.Context, id uint32) (generated.Installment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallment", ctx, id)
	ret0, _ := ret[0].(generated.Installment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstallment indicates an expected call of GetInstallment.
func (mr *MockQuerierMockRecorder) GetInstallment(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallment", reflect.TypeOf((*MockQuerier)(nil).GetInstallment), ctx, id)
}

// GetLoan mocks base method.
func (m *MockQuerier) GetLoan(ctx context.Context, id uint32) (generated.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoan", ctx, id)
	ret0, _ := ret[0].(generated.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoan indicates an expected call of GetLoan.
func (mr *MockQuerierMockRecorder) GetLoan(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoan", reflect.TypeOf((*MockQuerier)(nil).GetLoan), ctx, id)
}

// GetLoanData mocks base method.
func (m *MockQuerier) GetLoanData(ctx context.Context) ([]uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanData", ctx)
	ret0, _ := ret[0].([]uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanData indicates an expected call of GetLoanData.
func (mr *MockQuerierMockRecorder) GetLoanData(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanData", reflect.TypeOf((*MockQuerier)(nil).GetLoanData), ctx)
}

// GetLoanEvents mocks base method.
func (m *MockQuerier) GetLoanEvents(ctx context.Context) ([]generated.GetLoanEventsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanEvents", ctx)
	ret0, _ := ret[0].([]generated.GetLoanEventsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanEvents indicates an expected call of GetLoanEvents.
func (mr *MockQuerierMockRecorder) GetLoanEvents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanEvents", reflect.TypeOf((*MockQuerier)(nil).GetLoanEvents), ctx)
}

// GetLoanFullData mocks base method.
func (m *MockQuerier) GetLoanFullData(ctx context.Context, id uint32) (generated.GetLoanFullDataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanFullData", ctx, id)
	ret0, _ := ret[0].(generated.GetLoanFullDataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanFullData indicates an expected call of GetLoanFullData.
func (mr *MockQuerierMockRecorder) GetLoanFullData(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanFullData", reflect.TypeOf((*MockQuerier)(nil).GetLoanFullData), ctx, id)
}

// GetLoanPaymentData mocks base method.
func (m *MockQuerier) GetLoanPaymentData(ctx context.Context, id uint32) (generated.GetLoanPaymentDataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanPaymentData", ctx, id)
	ret0, _ := ret[0].(generated.GetLoanPaymentDataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanPaymentData indicates an expected call of GetLoanPaymentData.
func (mr *MockQuerierMockRecorder) GetLoanPaymentData(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanPaymentData", reflect.TypeOf((*MockQuerier)(nil).GetLoanPaymentData), ctx, id)
}

// GetLoanReportDataById mocks base method.
func (m *MockQuerier) GetLoanReportDataById(ctx context.Context, id uint32) (generated.GetLoanReportDataByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanReportDataById", ctx, id)
	ret0, _ := ret[0].(generated.GetLoanReportDataByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanReportDataById indicates an expected call of GetLoanReportDataById.
func (mr *MockQuerierMockRecorder) GetLoanReportDataById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanReportDataById", reflect.TypeOf((*MockQuerier)(nil).GetLoanReportDataById), ctx, id)
}

// GetLoansReportData mocks base method.
func (m *MockQuerier) GetLoansReportData(ctx context.Context, arg generated.GetLoansReportDataParams) ([]generated.GetLoansReportDataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoansReportData", ctx, arg)
	ret0, _ := ret[0].([]generated.GetLoansReportDataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoansReportData indicates an expected call of GetLoansReportData.
func (mr *MockQuerierMockRecorder) GetLoansReportData(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoansReportData", reflect.TypeOf((*MockQuerier)(nil).GetLoansReportData), ctx, arg)
}

// GetNonPosted mocks base method.
func (m *MockQuerier) GetNonPosted(ctx context.Context, id uint32) (generated.NonPosted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonPosted", ctx, id)
	ret0, _ := ret[0].(generated.NonPosted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonPosted indicates an expected call of GetNonPosted.
func (mr *MockQuerierMockRecorder) GetNonPosted(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonPosted", reflect.TypeOf((*MockQuerier)(nil).GetNonPosted), ctx, id)
}

// GetPaymentReportData mocks base method.
func (m *MockQuerier) GetPaymentReportData(ctx context.Context, arg generated.GetPaymentReportDataParams) ([]generated.GetPaymentReportDataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentReportData", ctx, arg)
	ret0, _ := ret[0].([]generated.GetPaymentReportDataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentReportData indicates an expected call of GetPaymentReportData.
func (mr *MockQuerierMockRecorder) GetPaymentReportData(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentReportData", reflect.TypeOf((*MockQuerier)(nil).GetPaymentReportData), ctx, arg)
}

// GetProduct mocks base method.
func (m *MockQuerier) GetProduct(ctx context.Context, id uint32) (generated.GetProductRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, id)
	ret0, _ := ret[0].(generated.GetProductRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockQuerierMockRecorder) GetProduct(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockQuerier)(nil).GetProduct), ctx, id)
}

// GetProductRepayAmount mocks base method.
func (m *MockQuerier) GetProductRepayAmount(ctx context.Context, id uint32) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductRepayAmount", ctx, id)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductRepayAmount indicates an expected call of GetProductRepayAmount.
func (mr *MockQuerierMockRecorder) GetProductRepayAmount(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductRepayAmount", reflect.TypeOf((*MockQuerier)(nil).GetProductRepayAmount), ctx, id)
}

// GetProductReportData mocks base method.
func (m *MockQuerier) GetProductReportData(ctx context.Context, arg generated.GetProductReportDataParams) ([]generated.GetProductReportDataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductReportData", ctx, arg)
	ret0, _ := ret[0].([]generated.GetProductReportDataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductReportData indicates an expected call of GetProductReportData.
func (mr *MockQuerierMockRecorder) GetProductReportData(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductReportData", reflect.TypeOf((*MockQuerier)(nil).GetProductReportData), ctx, arg)
}

// GetTotalPaidByIDorAccountNo mocks base method.
func (m *MockQuerier) GetTotalPaidByIDorAccountNo(ctx context.Context, arg generated.GetTotalPaidByIDorAccountNoParams) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPaidByIDorAccountNo", ctx, arg)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalPaidByIDorAccountNo indicates an expected call of GetTotalPaidByIDorAccountNo.
func (mr *MockQuerierMockRecorder) GetTotalPaidByIDorAccountNo(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPaidByIDorAccountNo", reflect.TypeOf((*MockQuerier)(nil).GetTotalPaidByIDorAccountNo), ctx, arg)
}

// GetUnpaidInstallmentsData mocks base method.
func (m *MockQuerier) GetUnpaidInstallmentsData(ctx context.Context, arg generated.GetUnpaidInstallmentsDataParams) ([]generated.GetUnpaidInstallmentsDataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnpaidInstallmentsData", ctx, arg)
	ret0, _ := ret[0].([]generated.GetUnpaidInstallmentsDataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnpaidInstallmentsData indicates an expected call of GetUnpaidInstallmentsData.
func (mr *MockQuerierMockRecorder) GetUnpaidInstallmentsData(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnpaidInstallmentsData", reflect.TypeOf((*MockQuerier)(nil).GetUnpaidInstallmentsData), ctx, arg)
}

// GetUser mocks base method.
func (m *MockQuerier) GetUser(ctx context.Context, id uint32) (generated.GetUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(generated.GetUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockQuerierMockRecorder) GetUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockQuerier)(nil).GetUser), ctx, id)
}

// GetUserAdminsReportData mocks base method.
func (m *MockQuerier) GetUserAdminsReportData(ctx context.Context, arg generated.GetUserAdminsReportDataParams) ([]generated.GetUserAdminsReportDataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAdminsReportData", ctx, arg)
	ret0, _ := ret[0].([]generated.GetUserAdminsReportDataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAdminsReportData indicates an expected call of GetUserAdminsReportData.
func (mr *MockQuerierMockRecorder) GetUserAdminsReportData(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAdminsReportData", reflect.TypeOf((*MockQuerier)(nil).GetUserAdminsReportData), ctx, arg)
}

// GetUserByEmail mocks base method.
func (m *MockQuerier) GetUserByEmail(ctx context.Context, email string) (generated.GetUserByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(generated.GetUserByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockQuerierMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockQuerier)(nil).GetUserByEmail), ctx, email)
}

// GetUserUsersReportData mocks base method.
func (m *MockQuerier) GetUserUsersReportData(ctx context.Context, arg generated.GetUserUsersReportDataParams) (generated.GetUserUsersReportDataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserUsersReportData", ctx, arg)
	ret0, _ := ret[0].(generated.GetUserUsersReportDataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserUsersReportData indicates an expected call of GetUserUsersReportData.
func (mr *MockQuerierMockRecorder) GetUserUsersReportData(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserUsersReportData", reflect.TypeOf((*MockQuerier)(nil).GetUserUsersReportData), ctx, arg)
}

// HelperClient mocks base method.
func (m *MockQuerier) HelperClient(ctx context.Context) ([]generated.HelperClientRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HelperClient", ctx)
	ret0, _ := ret[0].([]generated.HelperClientRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HelperClient indicates an expected call of HelperClient.
func (mr *MockQuerierMockRecorder) HelperClient(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelperClient", reflect.TypeOf((*MockQuerier)(nil).HelperClient), ctx)
}

// HelperProduct mocks base method.
func (m *MockQuerier) HelperProduct(ctx context.Context) ([]generated.HelperProductRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HelperProduct", ctx)
	ret0, _ := ret[0].([]generated.HelperProductRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HelperProduct indicates an expected call of HelperProduct.
func (mr *MockQuerierMockRecorder) HelperProduct(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelperProduct", reflect.TypeOf((*MockQuerier)(nil).HelperProduct), ctx)
}

// HelperUser mocks base method.
func (m *MockQuerier) HelperUser(ctx context.Context) ([]generated.HelperUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HelperUser", ctx)
	ret0, _ := ret[0].([]generated.HelperUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HelperUser indicates an expected call of HelperUser.
func (mr *MockQuerierMockRecorder) HelperUser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelperUser", reflect.TypeOf((*MockQuerier)(nil).HelperUser), ctx)
}

// HelperUserById mocks base method.
func (m *MockQuerier) HelperUserById(ctx context.Context, id uint32) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HelperUserById", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HelperUserById indicates an expected call of HelperUserById.
func (mr *MockQuerierMockRecorder) HelperUserById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelperUserById", reflect.TypeOf((*MockQuerier)(nil).HelperUserById), ctx, id)
}

// ListAllNonPosted mocks base method.
func (m *MockQuerier) ListAllNonPosted(ctx context.Context, arg generated.ListAllNonPostedParams) ([]generated.NonPosted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllNonPosted", ctx, arg)
	ret0, _ := ret[0].([]generated.NonPosted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllNonPosted indicates an expected call of ListAllNonPosted.
func (mr *MockQuerierMockRecorder) ListAllNonPosted(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllNonPosted", reflect.TypeOf((*MockQuerier)(nil).ListAllNonPosted), ctx, arg)
}

// ListAllNonPostedByTransactionSource mocks base method.
func (m *MockQuerier) ListAllNonPostedByTransactionSource(ctx context.Context, transactionSource generated.NonPostedTransactionSource) ([]generated.NonPosted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllNonPostedByTransactionSource", ctx, transactionSource)
	ret0, _ := ret[0].([]generated.NonPosted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllNonPostedByTransactionSource indicates an expected call of ListAllNonPostedByTransactionSource.
func (mr *MockQuerierMockRecorder) ListAllNonPostedByTransactionSource(ctx, transactionSource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllNonPostedByTransactionSource", reflect.TypeOf((*MockQuerier)(nil).ListAllNonPostedByTransactionSource), ctx, transactionSource)
}

// ListBrachesByCategory mocks base method.
func (m *MockQuerier) ListBrachesByCategory(ctx context.Context, arg generated.ListBrachesByCategoryParams) ([]generated.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBrachesByCategory", ctx, arg)
	ret0, _ := ret[0].([]generated.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBrachesByCategory indicates an expected call of ListBrachesByCategory.
func (mr *MockQuerierMockRecorder) ListBrachesByCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBrachesByCategory", reflect.TypeOf((*MockQuerier)(nil).ListBrachesByCategory), ctx, arg)
}

// ListBranches mocks base method.
func (m *MockQuerier) ListBranches(ctx context.Context) ([]generated.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranches", ctx)
	ret0, _ := ret[0].([]generated.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBranches indicates an expected call of ListBranches.
func (mr *MockQuerierMockRecorder) ListBranches(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranches", reflect.TypeOf((*MockQuerier)(nil).ListBranches), ctx)
}

// ListClients mocks base method.
func (m *MockQuerier) ListClients(ctx context.Context, arg generated.ListClientsParams) ([]generated.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClients", ctx, arg)
	ret0, _ := ret[0].([]generated.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClients indicates an expected call of ListClients.
func (mr *MockQuerierMockRecorder) ListClients(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClients", reflect.TypeOf((*MockQuerier)(nil).ListClients), ctx, arg)
}

// ListClientsByActiveStatus mocks base method.
func (m *MockQuerier) ListClientsByActiveStatus(ctx context.Context, arg generated.ListClientsByActiveStatusParams) ([]generated.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClientsByActiveStatus", ctx, arg)
	ret0, _ := ret[0].([]generated.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClientsByActiveStatus indicates an expected call of ListClientsByActiveStatus.
func (mr *MockQuerierMockRecorder) ListClientsByActiveStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClientsByActiveStatus", reflect.TypeOf((*MockQuerier)(nil).ListClientsByActiveStatus), ctx, arg)
}

// ListClientsByBranch mocks base method.
func (m *MockQuerier) ListClientsByBranch(ctx context.Context, arg generated.ListClientsByBranchParams) ([]generated.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClientsByBranch", ctx, arg)
	ret0, _ := ret[0].([]generated.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClientsByBranch indicates an expected call of ListClientsByBranch.
func (mr *MockQuerierMockRecorder) ListClientsByBranch(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClientsByBranch", reflect.TypeOf((*MockQuerier)(nil).ListClientsByBranch), ctx, arg)
}

// ListClientsByCategory mocks base method.
func (m *MockQuerier) ListClientsByCategory(ctx context.Context, arg generated.ListClientsByCategoryParams) ([]generated.ListClientsByCategoryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClientsByCategory", ctx, arg)
	ret0, _ := ret[0].([]generated.ListClientsByCategoryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClientsByCategory indicates an expected call of ListClientsByCategory.
func (mr *MockQuerierMockRecorder) ListClientsByCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClientsByCategory", reflect.TypeOf((*MockQuerier)(nil).ListClientsByCategory), ctx, arg)
}

// ListExpectedPayments mocks base method.
func (m *MockQuerier) ListExpectedPayments(ctx context.Context, arg generated.ListExpectedPaymentsParams) ([]generated.ListExpectedPaymentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExpectedPayments", ctx, arg)
	ret0, _ := ret[0].([]generated.ListExpectedPaymentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExpectedPayments indicates an expected call of ListExpectedPayments.
func (mr *MockQuerierMockRecorder) ListExpectedPayments(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExpectedPayments", reflect.TypeOf((*MockQuerier)(nil).ListExpectedPayments), ctx, arg)
}

// ListInstallmentsByLoan mocks base method.
func (m *MockQuerier) ListInstallmentsByLoan(ctx context.Context, loanID uint32) ([]generated.Installment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstallmentsByLoan", ctx, loanID)
	ret0, _ := ret[0].([]generated.Installment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstallmentsByLoan indicates an expected call of ListInstallmentsByLoan.
func (mr *MockQuerierMockRecorder) ListInstallmentsByLoan(ctx, loanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstallmentsByLoan", reflect.TypeOf((*MockQuerier)(nil).ListInstallmentsByLoan), ctx, loanID)
}

// ListLoans mocks base method.
func (m *MockQuerier) ListLoans(ctx context.Context, arg generated.ListLoansParams) ([]generated.ListLoansRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoans", ctx, arg)
	ret0, _ := ret[0].([]generated.ListLoansRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoans indicates an expected call of ListLoans.
func (mr *MockQuerierMockRecorder) ListLoans(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoans", reflect.TypeOf((*MockQuerier)(nil).ListLoans), ctx, arg)
}

// ListLoansByClient mocks base method.
func (m *MockQuerier) ListLoansByClient(ctx context.Context, arg generated.ListLoansByClientParams) ([]generated.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoansByClient", ctx, arg)
	ret0, _ := ret[0].([]generated.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoansByClient indicates an expected call of ListLoansByClient.
func (mr *MockQuerierMockRecorder) ListLoansByClient(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoansByClient", reflect.TypeOf((*MockQuerier)(nil).ListLoansByClient), ctx, arg)
}

// ListLoansByLoanOfficer mocks base method.
func (m *MockQuerier) ListLoansByLoanOfficer(ctx context.Context, arg generated.ListLoansByLoanOfficerParams) ([]generated.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoansByLoanOfficer", ctx, arg)
	ret0, _ := ret[0].([]generated.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoansByLoanOfficer indicates an expected call of ListLoansByLoanOfficer.
func (mr *MockQuerierMockRecorder) ListLoansByLoanOfficer(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoansByLoanOfficer", reflect.TypeOf((*MockQuerier)(nil).ListLoansByLoanOfficer), ctx, arg)
}

// ListLoansByStatus mocks base method.
func (m *MockQuerier) ListLoansByStatus(ctx context.Context, arg generated.ListLoansByStatusParams) ([]generated.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoansByStatus", ctx, arg)
	ret0, _ := ret[0].([]generated.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoansByStatus indicates an expected call of ListLoansByStatus.
func (mr *MockQuerierMockRecorder) ListLoansByStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoansByStatus", reflect.TypeOf((*MockQuerier)(nil).ListLoansByStatus), ctx, arg)
}

// ListNonDisbursedLoans mocks base method.
func (m *MockQuerier) ListNonDisbursedLoans(ctx context.Context, arg generated.ListNonDisbursedLoansParams) ([]generated.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNonDisbursedLoans", ctx, arg)
	ret0, _ := ret[0].([]generated.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNonDisbursedLoans indicates an expected call of ListNonDisbursedLoans.
func (mr *MockQuerierMockRecorder) ListNonDisbursedLoans(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNonDisbursedLoans", reflect.TypeOf((*MockQuerier)(nil).ListNonDisbursedLoans), ctx, arg)
}

// ListNonPostedByCategory mocks base method.
func (m *MockQuerier) ListNonPostedByCategory(ctx context.Context, arg generated.ListNonPostedByCategoryParams) ([]generated.ListNonPostedByCategoryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNonPostedByCategory", ctx, arg)
	ret0, _ := ret[0].([]generated.ListNonPostedByCategoryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNonPostedByCategory indicates an expected call of ListNonPostedByCategory.
func (mr *MockQuerierMockRecorder) ListNonPostedByCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNonPostedByCategory", reflect.TypeOf((*MockQuerier)(nil).ListNonPostedByCategory), ctx, arg)
}

// ListNonPostedByTransactionSource mocks base method.
func (m *MockQuerier) ListNonPostedByTransactionSource(ctx context.Context, arg generated.ListNonPostedByTransactionSourceParams) ([]generated.NonPosted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNonPostedByTransactionSource", ctx, arg)
	ret0, _ := ret[0].([]generated.NonPosted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNonPostedByTransactionSource indicates an expected call of ListNonPostedByTransactionSource.
func (mr *MockQuerierMockRecorder) ListNonPostedByTransactionSource(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNonPostedByTransactionSource", reflect.TypeOf((*MockQuerier)(nil).ListNonPostedByTransactionSource), ctx, arg)
}

// ListProducts mocks base method.
func (m *MockQuerier) ListProducts(ctx context.Context, arg generated.ListProductsParams) ([]generated.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", ctx, arg)
	ret0, _ := ret[0].([]generated.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockQuerierMockRecorder) ListProducts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockQuerier)(nil).ListProducts), ctx, arg)
}

// ListProductsByBranch mocks base method.
func (m *MockQuerier) ListProductsByBranch(ctx context.Context, arg generated.ListProductsByBranchParams) ([]generated.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductsByBranch", ctx, arg)
	ret0, _ := ret[0].([]generated.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductsByBranch indicates an expected call of ListProductsByBranch.
func (mr *MockQuerierMockRecorder) ListProductsByBranch(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductsByBranch", reflect.TypeOf((*MockQuerier)(nil).ListProductsByBranch), ctx, arg)
}

// ListProductsByCategory mocks base method.
func (m *MockQuerier) ListProductsByCategory(ctx context.Context, arg generated.ListProductsByCategoryParams) ([]generated.ListProductsByCategoryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductsByCategory", ctx, arg)
	ret0, _ := ret[0].([]generated.ListProductsByCategoryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductsByCategory indicates an expected call of ListProductsByCategory.
func (mr *MockQuerierMockRecorder) ListProductsByCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductsByCategory", reflect.TypeOf((*MockQuerier)(nil).ListProductsByCategory), ctx, arg)
}

// ListUnassignedNonPosted mocks base method.
func (m *MockQuerier) ListUnassignedNonPosted(ctx context.Context, arg generated.ListUnassignedNonPostedParams) ([]generated.NonPosted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnassignedNonPosted", ctx, arg)
	ret0, _ := ret[0].([]generated.NonPosted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnassignedNonPosted indicates an expected call of ListUnassignedNonPosted.
func (mr *MockQuerierMockRecorder) ListUnassignedNonPosted(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnassignedNonPosted", reflect.TypeOf((*MockQuerier)(nil).ListUnassignedNonPosted), ctx, arg)
}

// ListUnpaidInstallmentsByLoan mocks base method.
func (m *MockQuerier) ListUnpaidInstallmentsByLoan(ctx context.Context, loanID uint32) ([]generated.Installment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnpaidInstallmentsByLoan", ctx, loanID)
	ret0, _ := ret[0].([]generated.Installment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnpaidInstallmentsByLoan indicates an expected call of ListUnpaidInstallmentsByLoan.
func (mr *MockQuerierMockRecorder) ListUnpaidInstallmentsByLoan(ctx, loanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnpaidInstallmentsByLoan", reflect.TypeOf((*MockQuerier)(nil).ListUnpaidInstallmentsByLoan), ctx, loanID)
}

// ListUsers mocks base method.
func (m *MockQuerier) ListUsers(ctx context.Context, arg generated.ListUsersParams) ([]generated.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, arg)
	ret0, _ := ret[0].([]generated.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockQuerierMockRecorder) ListUsers(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockQuerier)(nil).ListUsers), ctx, arg)
}

// ListUsersByCategory mocks base method.
func (m *MockQuerier) ListUsersByCategory(ctx context.Context, arg generated.ListUsersByCategoryParams) ([]generated.ListUsersByCategoryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersByCategory", ctx, arg)
	ret0, _ := ret[0].([]generated.ListUsersByCategoryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersByCategory indicates an expected call of ListUsersByCategory.
func (mr *MockQuerierMockRecorder) ListUsersByCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersByCategory", reflect.TypeOf((*MockQuerier)(nil).ListUsersByCategory), ctx, arg)
}

// NullifyClientOverpayment mocks base method.
func (m *MockQuerier) NullifyClientOverpayment(ctx context.Context, id uint32) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NullifyClientOverpayment", ctx, id)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NullifyClientOverpayment indicates an expected call of NullifyClientOverpayment.
func (mr *MockQuerierMockRecorder) NullifyClientOverpayment(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NullifyClientOverpayment", reflect.TypeOf((*MockQuerier)(nil).NullifyClientOverpayment), ctx, id)
}

// PayInstallment mocks base method.
func (m *MockQuerier) PayInstallment(ctx context.Context, arg generated.PayInstallmentParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayInstallment", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PayInstallment indicates an expected call of PayInstallment.
func (mr *MockQuerierMockRecorder) PayInstallment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayInstallment", reflect.TypeOf((*MockQuerier)(nil).PayInstallment), ctx, arg)
}

// TransferLoan mocks base method.
func (m *MockQuerier) TransferLoan(ctx context.Context, arg generated.TransferLoanParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferLoan", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferLoan indicates an expected call of TransferLoan.
func (mr *MockQuerierMockRecorder) TransferLoan(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferLoan", reflect.TypeOf((*MockQuerier)(nil).TransferLoan), ctx, arg)
}

// UpdateBranch mocks base method.
func (m *MockQuerier) UpdateBranch(ctx context.Context, arg generated.UpdateBranchParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBranch", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBranch indicates an expected call of UpdateBranch.
func (mr *MockQuerierMockRecorder) UpdateBranch(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranch", reflect.TypeOf((*MockQuerier)(nil).UpdateBranch), ctx, arg)
}

// UpdateClient mocks base method.
func (m *MockQuerier) UpdateClient(ctx context.Context, arg generated.UpdateClientParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockQuerierMockRecorder) UpdateClient(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockQuerier)(nil).UpdateClient), ctx, arg)
}

// UpdateClientOverpayment mocks base method.
func (m *MockQuerier) UpdateClientOverpayment(ctx context.Context, arg generated.UpdateClientOverpaymentParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClientOverpayment", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClientOverpayment indicates an expected call of UpdateClientOverpayment.
func (mr *MockQuerierMockRecorder) UpdateClientOverpayment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientOverpayment", reflect.TypeOf((*MockQuerier)(nil).UpdateClientOverpayment), ctx, arg)
}

// UpdateInstallment mocks base method.
func (m *MockQuerier) UpdateInstallment(ctx context.Context, arg generated.UpdateInstallmentParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstallment", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstallment indicates an expected call of UpdateInstallment.
func (mr *MockQuerierMockRecorder) UpdateInstallment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstallment", reflect.TypeOf((*MockQuerier)(nil).UpdateInstallment), ctx, arg)
}

// UpdateLoan mocks base method.
func (m *MockQuerier) UpdateLoan(ctx context.Context, arg generated.UpdateLoanParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoan", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoan indicates an expected call of UpdateLoan.
func (mr *MockQuerierMockRecorder) UpdateLoan(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoan", reflect.TypeOf((*MockQuerier)(nil).UpdateLoan), ctx, arg)
}

// UpdateLoanProcessingFeeStatus mocks base method.
func (m *MockQuerier) UpdateLoanProcessingFeeStatus(ctx context.Context, arg generated.UpdateLoanProcessingFeeStatusParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoanProcessingFeeStatus", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoanProcessingFeeStatus indicates an expected call of UpdateLoanProcessingFeeStatus.
func (mr *MockQuerierMockRecorder) UpdateLoanProcessingFeeStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoanProcessingFeeStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateLoanProcessingFeeStatus), ctx, arg)
}

// UpdateLoanStatus mocks base method.
func (m *MockQuerier) UpdateLoanStatus(ctx context.Context, arg generated.UpdateLoanStatusParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoanStatus", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoanStatus indicates an expected call of UpdateLoanStatus.
func (mr *MockQuerierMockRecorder) UpdateLoanStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoanStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateLoanStatus), ctx, arg)
}

// UpdateUser mocks base method.
func (m *MockQuerier) UpdateUser(ctx context.Context, arg generated.UpdateUserParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockQuerierMockRecorder) UpdateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockQuerier)(nil).UpdateUser), ctx, arg)
}

// UpdateUserPassword mocks base method.
func (m *MockQuerier) UpdateUserPassword(ctx context.Context, arg generated.UpdateUserPasswordParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockQuerierMockRecorder) UpdateUserPassword(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockQuerier)(nil).UpdateUserPassword), ctx, arg)
}
