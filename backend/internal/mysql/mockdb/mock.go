// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/EmilioCliff/kokomed-fin/backend/internal/mysql/generated (interfaces: Querier)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination ./internal/mysql/mockdb/mock.go github.com/EmilioCliff/kokomed-fin/backend/internal/mysql/generated Querier
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	generated "github.com/EmilioCliff/kokomed-fin/backend/internal/mysql/generated"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AssignNonPosted mocks base method.
func (m *MockQuerier) AssignNonPosted(arg0 context.Context, arg1 generated.AssignNonPostedParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignNonPosted", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignNonPosted indicates an expected call of AssignNonPosted.
func (mr *MockQuerierMockRecorder) AssignNonPosted(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignNonPosted", reflect.TypeOf((*MockQuerier)(nil).AssignNonPosted), arg0, arg1)
}

// CreateBranch mocks base method.
func (m *MockQuerier) CreateBranch(arg0 context.Context, arg1 string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranch indicates an expected call of CreateBranch.
func (mr *MockQuerierMockRecorder) CreateBranch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockQuerier)(nil).CreateBranch), arg0, arg1)
}

// CreateClient mocks base method.
func (m *MockQuerier) CreateClient(arg0 context.Context, arg1 generated.CreateClientParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockQuerierMockRecorder) CreateClient(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockQuerier)(nil).CreateClient), arg0, arg1)
}

// CreateInstallment mocks base method.
func (m *MockQuerier) CreateInstallment(arg0 context.Context, arg1 generated.CreateInstallmentParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstallment", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstallment indicates an expected call of CreateInstallment.
func (mr *MockQuerierMockRecorder) CreateInstallment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstallment", reflect.TypeOf((*MockQuerier)(nil).CreateInstallment), arg0, arg1)
}

// CreateLoan mocks base method.
func (m *MockQuerier) CreateLoan(arg0 context.Context, arg1 generated.CreateLoanParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoan", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoan indicates an expected call of CreateLoan.
func (mr *MockQuerierMockRecorder) CreateLoan(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoan", reflect.TypeOf((*MockQuerier)(nil).CreateLoan), arg0, arg1)
}

// CreateNonPosted mocks base method.
func (m *MockQuerier) CreateNonPosted(arg0 context.Context, arg1 generated.CreateNonPostedParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNonPosted", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNonPosted indicates an expected call of CreateNonPosted.
func (mr *MockQuerierMockRecorder) CreateNonPosted(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNonPosted", reflect.TypeOf((*MockQuerier)(nil).CreateNonPosted), arg0, arg1)
}

// CreateProduct mocks base method.
func (m *MockQuerier) CreateProduct(arg0 context.Context, arg1 generated.CreateProductParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockQuerierMockRecorder) CreateProduct(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockQuerier)(nil).CreateProduct), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(arg0 context.Context, arg1 generated.CreateUserParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), arg0, arg1)
}

// DeleteBranch mocks base method.
func (m *MockQuerier) DeleteBranch(arg0 context.Context, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBranch indicates an expected call of DeleteBranch.
func (mr *MockQuerierMockRecorder) DeleteBranch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranch", reflect.TypeOf((*MockQuerier)(nil).DeleteBranch), arg0, arg1)
}

// DeleteClient mocks base method.
func (m *MockQuerier) DeleteClient(arg0 context.Context, arg1 uint32) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClient", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockQuerierMockRecorder) DeleteClient(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockQuerier)(nil).DeleteClient), arg0, arg1)
}

// DeleteLoan mocks base method.
func (m *MockQuerier) DeleteLoan(arg0 context.Context, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoan", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoan indicates an expected call of DeleteLoan.
func (mr *MockQuerierMockRecorder) DeleteLoan(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoan", reflect.TypeOf((*MockQuerier)(nil).DeleteLoan), arg0, arg1)
}

// DeleteNonPosted mocks base method.
func (m *MockQuerier) DeleteNonPosted(arg0 context.Context, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNonPosted", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNonPosted indicates an expected call of DeleteNonPosted.
func (mr *MockQuerierMockRecorder) DeleteNonPosted(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNonPosted", reflect.TypeOf((*MockQuerier)(nil).DeleteNonPosted), arg0, arg1)
}

// DeleteProduct mocks base method.
func (m *MockQuerier) DeleteProduct(arg0 context.Context, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockQuerierMockRecorder) DeleteProduct(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockQuerier)(nil).DeleteProduct), arg0, arg1)
}

// DisburseLoan mocks base method.
func (m *MockQuerier) DisburseLoan(arg0 context.Context, arg1 generated.DisburseLoanParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisburseLoan", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisburseLoan indicates an expected call of DisburseLoan.
func (mr *MockQuerierMockRecorder) DisburseLoan(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisburseLoan", reflect.TypeOf((*MockQuerier)(nil).DisburseLoan), arg0, arg1)
}

// GetBranch mocks base method.
func (m *MockQuerier) GetBranch(arg0 context.Context, arg1 uint32) (generated.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranch", arg0, arg1)
	ret0, _ := ret[0].(generated.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranch indicates an expected call of GetBranch.
func (mr *MockQuerierMockRecorder) GetBranch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranch", reflect.TypeOf((*MockQuerier)(nil).GetBranch), arg0, arg1)
}

// GetClient mocks base method.
func (m *MockQuerier) GetClient(arg0 context.Context, arg1 uint32) (generated.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", arg0, arg1)
	ret0, _ := ret[0].(generated.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockQuerierMockRecorder) GetClient(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockQuerier)(nil).GetClient), arg0, arg1)
}

// GetClientByPhoneNumber mocks base method.
func (m *MockQuerier) GetClientByPhoneNumber(arg0 context.Context, arg1 string) (generated.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientByPhoneNumber", arg0, arg1)
	ret0, _ := ret[0].(generated.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientByPhoneNumber indicates an expected call of GetClientByPhoneNumber.
func (mr *MockQuerierMockRecorder) GetClientByPhoneNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientByPhoneNumber", reflect.TypeOf((*MockQuerier)(nil).GetClientByPhoneNumber), arg0, arg1)
}

// GetInstallment mocks base method.
func (m *MockQuerier) GetInstallment(arg0 context.Context, arg1 uint32) (generated.Installment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallment", arg0, arg1)
	ret0, _ := ret[0].(generated.Installment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstallment indicates an expected call of GetInstallment.
func (mr *MockQuerierMockRecorder) GetInstallment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallment", reflect.TypeOf((*MockQuerier)(nil).GetInstallment), arg0, arg1)
}

// GetLoan mocks base method.
func (m *MockQuerier) GetLoan(arg0 context.Context, arg1 uint32) (generated.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoan", arg0, arg1)
	ret0, _ := ret[0].(generated.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoan indicates an expected call of GetLoan.
func (mr *MockQuerierMockRecorder) GetLoan(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoan", reflect.TypeOf((*MockQuerier)(nil).GetLoan), arg0, arg1)
}

// GetNonPosted mocks base method.
func (m *MockQuerier) GetNonPosted(arg0 context.Context, arg1 uint32) (generated.NonPosted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonPosted", arg0, arg1)
	ret0, _ := ret[0].(generated.NonPosted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonPosted indicates an expected call of GetNonPosted.
func (mr *MockQuerierMockRecorder) GetNonPosted(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonPosted", reflect.TypeOf((*MockQuerier)(nil).GetNonPosted), arg0, arg1)
}

// GetProduct mocks base method.
func (m *MockQuerier) GetProduct(arg0 context.Context, arg1 uint32) (generated.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1)
	ret0, _ := ret[0].(generated.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockQuerierMockRecorder) GetProduct(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockQuerier)(nil).GetProduct), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockQuerier) GetUser(arg0 context.Context, arg1 uint32) (generated.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(generated.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockQuerierMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockQuerier)(nil).GetUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockQuerier) GetUserByEmail(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockQuerierMockRecorder) GetUserByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockQuerier)(nil).GetUserByEmail), arg0, arg1)
}

// ListAllNonPosted mocks base method.
func (m *MockQuerier) ListAllNonPosted(arg0 context.Context, arg1 generated.ListAllNonPostedParams) ([]generated.NonPosted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllNonPosted", arg0, arg1)
	ret0, _ := ret[0].([]generated.NonPosted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllNonPosted indicates an expected call of ListAllNonPosted.
func (mr *MockQuerierMockRecorder) ListAllNonPosted(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllNonPosted", reflect.TypeOf((*MockQuerier)(nil).ListAllNonPosted), arg0, arg1)
}

// ListBranches mocks base method.
func (m *MockQuerier) ListBranches(arg0 context.Context) ([]generated.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranches", arg0)
	ret0, _ := ret[0].([]generated.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBranches indicates an expected call of ListBranches.
func (mr *MockQuerierMockRecorder) ListBranches(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranches", reflect.TypeOf((*MockQuerier)(nil).ListBranches), arg0)
}

// ListClients mocks base method.
func (m *MockQuerier) ListClients(arg0 context.Context, arg1 generated.ListClientsParams) ([]generated.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClients", arg0, arg1)
	ret0, _ := ret[0].([]generated.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClients indicates an expected call of ListClients.
func (mr *MockQuerierMockRecorder) ListClients(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClients", reflect.TypeOf((*MockQuerier)(nil).ListClients), arg0, arg1)
}

// ListClientsByActiveStatus mocks base method.
func (m *MockQuerier) ListClientsByActiveStatus(arg0 context.Context, arg1 generated.ListClientsByActiveStatusParams) ([]generated.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClientsByActiveStatus", arg0, arg1)
	ret0, _ := ret[0].([]generated.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClientsByActiveStatus indicates an expected call of ListClientsByActiveStatus.
func (mr *MockQuerierMockRecorder) ListClientsByActiveStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClientsByActiveStatus", reflect.TypeOf((*MockQuerier)(nil).ListClientsByActiveStatus), arg0, arg1)
}

// ListClientsByBranch mocks base method.
func (m *MockQuerier) ListClientsByBranch(arg0 context.Context, arg1 generated.ListClientsByBranchParams) ([]generated.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClientsByBranch", arg0, arg1)
	ret0, _ := ret[0].([]generated.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClientsByBranch indicates an expected call of ListClientsByBranch.
func (mr *MockQuerierMockRecorder) ListClientsByBranch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClientsByBranch", reflect.TypeOf((*MockQuerier)(nil).ListClientsByBranch), arg0, arg1)
}

// ListInstallmentsByLoan mocks base method.
func (m *MockQuerier) ListInstallmentsByLoan(arg0 context.Context, arg1 generated.ListInstallmentsByLoanParams) ([]generated.Installment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstallmentsByLoan", arg0, arg1)
	ret0, _ := ret[0].([]generated.Installment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstallmentsByLoan indicates an expected call of ListInstallmentsByLoan.
func (mr *MockQuerierMockRecorder) ListInstallmentsByLoan(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstallmentsByLoan", reflect.TypeOf((*MockQuerier)(nil).ListInstallmentsByLoan), arg0, arg1)
}

// ListLoans mocks base method.
func (m *MockQuerier) ListLoans(arg0 context.Context, arg1 generated.ListLoansParams) ([]generated.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoans", arg0, arg1)
	ret0, _ := ret[0].([]generated.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoans indicates an expected call of ListLoans.
func (mr *MockQuerierMockRecorder) ListLoans(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoans", reflect.TypeOf((*MockQuerier)(nil).ListLoans), arg0, arg1)
}

// ListLoansByClient mocks base method.
func (m *MockQuerier) ListLoansByClient(arg0 context.Context, arg1 generated.ListLoansByClientParams) ([]generated.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoansByClient", arg0, arg1)
	ret0, _ := ret[0].([]generated.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoansByClient indicates an expected call of ListLoansByClient.
func (mr *MockQuerierMockRecorder) ListLoansByClient(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoansByClient", reflect.TypeOf((*MockQuerier)(nil).ListLoansByClient), arg0, arg1)
}

// ListLoansByLoanOfficer mocks base method.
func (m *MockQuerier) ListLoansByLoanOfficer(arg0 context.Context, arg1 generated.ListLoansByLoanOfficerParams) ([]generated.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoansByLoanOfficer", arg0, arg1)
	ret0, _ := ret[0].([]generated.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoansByLoanOfficer indicates an expected call of ListLoansByLoanOfficer.
func (mr *MockQuerierMockRecorder) ListLoansByLoanOfficer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoansByLoanOfficer", reflect.TypeOf((*MockQuerier)(nil).ListLoansByLoanOfficer), arg0, arg1)
}

// ListLoansByStatus mocks base method.
func (m *MockQuerier) ListLoansByStatus(arg0 context.Context, arg1 generated.ListLoansByStatusParams) ([]generated.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoansByStatus", arg0, arg1)
	ret0, _ := ret[0].([]generated.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoansByStatus indicates an expected call of ListLoansByStatus.
func (mr *MockQuerierMockRecorder) ListLoansByStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoansByStatus", reflect.TypeOf((*MockQuerier)(nil).ListLoansByStatus), arg0, arg1)
}

// ListNonDisbursedLoans mocks base method.
func (m *MockQuerier) ListNonDisbursedLoans(arg0 context.Context, arg1 generated.ListNonDisbursedLoansParams) ([]generated.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNonDisbursedLoans", arg0, arg1)
	ret0, _ := ret[0].([]generated.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNonDisbursedLoans indicates an expected call of ListNonDisbursedLoans.
func (mr *MockQuerierMockRecorder) ListNonDisbursedLoans(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNonDisbursedLoans", reflect.TypeOf((*MockQuerier)(nil).ListNonDisbursedLoans), arg0, arg1)
}

// ListProducts mocks base method.
func (m *MockQuerier) ListProducts(arg0 context.Context, arg1 generated.ListProductsParams) ([]generated.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", arg0, arg1)
	ret0, _ := ret[0].([]generated.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockQuerierMockRecorder) ListProducts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockQuerier)(nil).ListProducts), arg0, arg1)
}

// ListProductsByBranch mocks base method.
func (m *MockQuerier) ListProductsByBranch(arg0 context.Context, arg1 generated.ListProductsByBranchParams) ([]generated.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductsByBranch", arg0, arg1)
	ret0, _ := ret[0].([]generated.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductsByBranch indicates an expected call of ListProductsByBranch.
func (mr *MockQuerierMockRecorder) ListProductsByBranch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductsByBranch", reflect.TypeOf((*MockQuerier)(nil).ListProductsByBranch), arg0, arg1)
}

// ListUnassignedNonPosted mocks base method.
func (m *MockQuerier) ListUnassignedNonPosted(arg0 context.Context, arg1 generated.ListUnassignedNonPostedParams) ([]generated.NonPosted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnassignedNonPosted", arg0, arg1)
	ret0, _ := ret[0].([]generated.NonPosted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnassignedNonPosted indicates an expected call of ListUnassignedNonPosted.
func (mr *MockQuerierMockRecorder) ListUnassignedNonPosted(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnassignedNonPosted", reflect.TypeOf((*MockQuerier)(nil).ListUnassignedNonPosted), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockQuerier) ListUsers(arg0 context.Context, arg1 generated.ListUsersParams) ([]generated.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]generated.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockQuerierMockRecorder) ListUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockQuerier)(nil).ListUsers), arg0, arg1)
}

// TransferLoan mocks base method.
func (m *MockQuerier) TransferLoan(arg0 context.Context, arg1 generated.TransferLoanParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferLoan", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferLoan indicates an expected call of TransferLoan.
func (mr *MockQuerierMockRecorder) TransferLoan(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferLoan", reflect.TypeOf((*MockQuerier)(nil).TransferLoan), arg0, arg1)
}

// UpdateBranch mocks base method.
func (m *MockQuerier) UpdateBranch(arg0 context.Context, arg1 generated.UpdateBranchParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBranch", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBranch indicates an expected call of UpdateBranch.
func (mr *MockQuerierMockRecorder) UpdateBranch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranch", reflect.TypeOf((*MockQuerier)(nil).UpdateBranch), arg0, arg1)
}

// UpdateClient mocks base method.
func (m *MockQuerier) UpdateClient(arg0 context.Context, arg1 generated.UpdateClientParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockQuerierMockRecorder) UpdateClient(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockQuerier)(nil).UpdateClient), arg0, arg1)
}

// UpdateInstallment mocks base method.
func (m *MockQuerier) UpdateInstallment(arg0 context.Context, arg1 generated.UpdateInstallmentParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstallment", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstallment indicates an expected call of UpdateInstallment.
func (mr *MockQuerierMockRecorder) UpdateInstallment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstallment", reflect.TypeOf((*MockQuerier)(nil).UpdateInstallment), arg0, arg1)
}

// UpdateLoan mocks base method.
func (m *MockQuerier) UpdateLoan(arg0 context.Context, arg1 generated.UpdateLoanParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoan", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoan indicates an expected call of UpdateLoan.
func (mr *MockQuerierMockRecorder) UpdateLoan(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoan", reflect.TypeOf((*MockQuerier)(nil).UpdateLoan), arg0, arg1)
}

// UpdateLoanStatus mocks base method.
func (m *MockQuerier) UpdateLoanStatus(arg0 context.Context, arg1 generated.UpdateLoanStatusParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoanStatus", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoanStatus indicates an expected call of UpdateLoanStatus.
func (mr *MockQuerierMockRecorder) UpdateLoanStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoanStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateLoanStatus), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockQuerier) UpdateUser(arg0 context.Context, arg1 generated.UpdateUserParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockQuerierMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockQuerier)(nil).UpdateUser), arg0, arg1)
}
